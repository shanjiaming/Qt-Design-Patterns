class Fraction {
public:
    Fraction(int n)                  /* Single argument ctor defines a conversion from int. */
       : m_Numer(n), m_Denom(1) {}
    Fraction(int n, int d )
       : m_Numer(n), m_Denom(d) {}
    Fraction times(const Fraction& other) {
       return Fraction(m_Numer * other.m_Numer, m_Denom * other.m_Denom);
    }
private:
    int m_Numer, m_Denom;
};
int main() {
    int i;
    Fraction frac(8);                /* Conversion constructor call. */
    Fraction frac2 = 5;              /* Copy init (calls conversion ctor too). */
    frac = 9;                        /* Conversion followed by assignment. */
    frac = (Fraction) 7;             /* C-style typecast (deprecated). */
    frac = Fraction(6);              /* Explicit temporary, also a C++ typecast. */
    frac = static_cast<Fraction>(6); /* Preferred ANSI style typecast. */
    frac = frac2.times(19);          /* Implicit call to the conversion constructor. */
    return 0;
}

/*Ordinarily, any constructor that can be called with a single argument of a different
type is a conversion constructor that has the implicit mechanisms discussed previously.
If the implicit mechanisms are not appropriate for some reason, it is possible to suppress
them. The keyword explicit prevents the compiler from automatically using
that constructor for implicit conversions.*/

/*
The keyword explicit can be placed before a single argument constructor in the class
definition to prevent automatic conversion from being used by the compiler. This is useful if
the argument is not anything like the class it is constructing, or if there is something akin to
a parent-child relationship between them. Classes generated by QtCreator place this keyword
before the generated custom widget constructors, and it is advisable that you do the same with
your QWidget -derived classes.
*/
